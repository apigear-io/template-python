from olink.core.types import Name
from olink.remotenode import IObjectSource, RemoteNode
from {{module.name|identifier}}.api import api
from typing import Any

{% for interface in module.interfaces %}

class {{interface}}Source(IObjectSource):
    impl: api.I{{interface}}
    def __init__(self, impl: api.I{{interface}}):
        self.impl = impl
        RemoteNode.register_source(self)

    def olink_object_name(self):
        return "{{module}}.{{interface}}"


    def olink_set_property(self, name: str, value: Any):
        path = Name.path_from_name(name)
        self.impl.set_property(path, value)

    def olink_invoke(self, name: str, args: list[Any]) -> Any:
        path = Name.path_from_name(name)
        func = getattr(self.impl, path)
        return func(*args)

    def olink_linked(self, name: str, node: "RemoteNode"):
        print('linked')

    def olink_collect_properties(self) -> object:
        props = [ {% for property in interface.properties%}"{{property}}"{% unless forloop.last %}, {% endunless %}{% endfor %} ]
        return {k: getattr(self.impl, k) for k in props}

{% endfor %}

