from os import environ
import asyncio

from {{module.name|identifier}}.api import api
from . import shared
from . import service


{% for interface in module.interfaces %}



### Proxy Service

class {{interface}}Proxy(shared.{{interface}}EventListener):
    def __init__(self, session, service):
        self.session = session
        self.service = service
        self.service._set_listener(self)

{% for operation in interface.operations %}

    def {{operation}}({{operation|pyParams: 'api.'}}):
        resp = self.service.{{operation}}({{ operation.params | join: ', ' }})
        self._publish_state()
        return resp
{% endfor %}

{% for signal in interface.signals %}

    def notify{{signal.name|upperFirst}}({{signal|pyParams: 'api.'}}):
        if self.session:
            self.session.publish('{{module}}.{{interface}}.{{signal}}', {{ signal.params | join: ', ' }})
{% endfor %}

    def _get_state(self):
        return self.service._get_state().dict()

    def _set_state(self, **msg):
        self.service._set_state(**msg)
        self._publish_state()

    def _publish_state(self):
        self.session.publish('{{module}}.{{interface}}', **self.service._get_state().dict())

class {{interface}}Adapter(object):
    def __init__(self, proxy):
        self.proxy = proxy

    def register(self, session, module):
        self.session = session
        self.module = module
        session.register(self.proxy._get_state, f"{{module}}.{{interface}}._get")
        session.register(self.proxy._set_state, f"{{module}}.{{interface}}._set")
{% for operation in interface.operations %}
        session.register(self.proxy.{{operation}}, f"{{module}}.{{interface}}.{{operation}}")
{% endfor %}

{% endfor %}


def register(session):
{% for interface in module.interfaces %}

    # {{interface}}
    instance = service.{{interface}}Service()
    proxy = {{interface.name}}Proxy(session, instance)
    adapter = {{interface.name}}Adapter(proxy)
    adapter.register(session, '{{module}}.{{interface}}')
    asyncio.create_task(instance.run())
{% else %}
    pass
{% endfor %}
