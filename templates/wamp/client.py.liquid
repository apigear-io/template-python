from os import environ
import asyncio
from {{module.name|identifier}}.api import api
from . import shared




{% for interface in module.interfaces %}

class {{interface}}Service(object):
    def __init__(self, session):
        self._session = session
        self._listener = None
        self._state = shared.{{interface}}State(
{% for property in interface.properties %}
            {{property}}={% if module.enums contains property.type %}api.{% endif %}{{property|pyDefault}}{% unless forloop.last %},{% endunless %}
{% endfor %}
        )

    def _set_listener(self, listener: shared.{{interface}}EventListener):
        self._listener = listener

    async def _call(self, op: str, *args, **kwargs):
        # call a remote procedure
        return await self._session.call(f'{{module}}.{{interface}}.{op}', *args, **kwargs)

    def _on_state_event(self, msg):
        # handle remote state change
        self._state = shared.{{interface}}State.parse_obj(msg)

{% for signal in interface.signals %}

    def _on_{{signal}}(self, msg):
        # notify listener
        print('on {{signal}}', msg)
        if self._listener:
            self._listener.{{signal}}(**msg)
{% endfor %}

    async def _register(self):
        # register all signals and state changed
        await self._session.subscribe(self._on_state_event, '{{module}}.{{interface}}')
{% for signal in interface.signals %}
        await self._session.subscribe(self._on_{{signal}}, '{{module}}.{{interface}}.{{signal}}')
{% endfor %}


{% for property in interface.properties %}

    @property
    def {{property}}(self):
        return self._state.{{property}}
{% endfor %}

{% for operation in interface.operations %}

    async def {{operation.name}}({{operation|pyParams: 'api.'}}):
        return await self._call('{{operation}}'{% for param in operation.params %}, {{param}}{% endfor %})

{% endfor %}
{% endfor %}
