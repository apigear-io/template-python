from pydantic import BaseModel
from typing import Iterable
from {{module.name|identifier}}.api import api


{% for interface in module.interfaces %}


class {{interface}}State(BaseModel):
{% for property in interface.properties %}
    {{property}}: {{property|pyReturn: 'api.'}}
{% else %}
    pass
{% endfor %}

{% for operation in interface.operations %}


class {{interface}}{{operation|capitalize}}Request(BaseModel):
{% for param in operation.params %}
    {{param}}: {{param|pyReturn: 'api.'}}
{% else %}
    pass
{% endfor %}


class {{interface}}{{operation|capitalize}}Response(BaseModel):
{% if operation.type != 'void' %}
    result: {{operation|pyReturn: 'api.'}}
    state: {{interface}}State
{% else %}
    pass
    state: {{interface}}State
{% endif %}
{% endfor %}
{% endfor %}
